{
  "_args": [
    [
      {
        "raw": "mongoose-likes",
        "scope": null,
        "escapedName": "mongoose-likes",
        "name": "mongoose-likes",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Elder David Edono\\Desktop\\practice\\project 2"
    ]
  ],
  "_from": "mongoose-likes@latest",
  "_id": "mongoose-likes@0.1.0",
  "_inCache": true,
  "_location": "/mongoose-likes",
  "_npmUser": {
    "name": "jjwchoy",
    "email": "jjwchoy@gmail.com"
  },
  "_npmVersion": "1.1.66",
  "_phantomChildren": {
    "hooks": "0.2.1",
    "kerberos": "0.0.3"
  },
  "_requested": {
    "raw": "mongoose-likes",
    "scope": null,
    "escapedName": "mongoose-likes",
    "name": "mongoose-likes",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-likes/-/mongoose-likes-0.1.0.tgz",
  "_shasum": "0526d9811f4daf03038c14902cdda7117acf1ce0",
  "_shrinkwrap": null,
  "_spec": "mongoose-likes",
  "_where": "C:\\Users\\Elder David Edono\\Desktop\\practice\\project 2",
  "author": {
    "name": "Jason Choy",
    "email": "jjwchoy@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/jjwchoy/mongoose-likes/issues"
  },
  "contributors": [
    {
      "name": "Jason Choy",
      "email": "jjwchoy@gmail.com"
    }
  ],
  "dependencies": {
    "mongoose": "3.5.x",
    "mongoose-votes": "0.1.0"
  },
  "description": "Mongoose plugin to track likes for an object",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "0526d9811f4daf03038c14902cdda7117acf1ce0",
    "tarball": "https://registry.npmjs.org/mongoose-likes/-/mongoose-likes-0.1.0.tgz"
  },
  "homepage": "https://github.com/jjwchoy/mongoose-likes#readme",
  "keywords": [
    "mongoose"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "jjwchoy",
      "email": "jjwchoy@gmail.com"
    }
  ],
  "name": "mongoose-likes",
  "optionalDependencies": {},
  "readme": "mongoose-likes\n==============\n\nMongoose plugin to track likes/dislikes for an object. This is a customisation of the [mongoose-votes](http://github.com/jjwchoy/mongoose-votes) plugin which changes the terminology to be more appropriate for likes/dislikes.\n\nStatus\n------\n\nThis plugin is currently unstable and not thoroughly tested. Please refrain from using it at the present time.\n\n\nUsage\n-----\n\n### Define your schema and add the likes plugin\n\n```javascript\nvar mongoose = require('mongoose');\nvar likesPlugin = require('mongoose-likes');\n\nvar postSchema = mongoose.Schema({\n    author: ObjectId,\n    title: String,\n    body: String\n});\n\npostSchema.plugin(likesPlugin);\n\nvar Post = mongoose.model('Post', postSchema);\n```\n\n### Like / dislike\n\n```javascript\nvar p = ... ; // some post object\n\np.like(likerId, function(err) {\n    ...\n});\n\np.dislike(dislikerId, function(err) {\n    ...\n});\n\n// These functions are also defined as statics\n\nPost.like(post.id, likerId, function(err) {\n   ...\n});\n\nPost.dislike(post.id, dislikerId, function(err) {\n   ...\n});\n```\n\n### If a user changes their mind\n\n```javascript\np.cancelLike(likerId, function(err) {\n    ...\n});\n\np.cancelDislike(dislikerId, function(err) {\n    ...\n});\n\n// These functions are also defined as statics\n\nPost.cancelLike(post.id, likerId, function(err) {\n    ...\n});\n\nPost.cancelDislike(post.id, dislikerId, function(err) {\n    ...\n});\n```\n\n### Finding out what a user has liked/disliked\n\n#### Find every post a user has liked\n\n```javascript\nPost.findLikes(userId, function(err, likes) {\n   // likes is an array of objects with a single property: _id\n});\n```\n\n#### Determine if a user has liked a particular post\n```javascript\nPost.findLikes(userId, {_id:post.id}, function(err, likes) {\n    if (!err) {\n        var hasLiked = !!likes.length;\n    }\n});\n```\n\n`findDislikes` works in the same manner\n\n### Properties added\n\n```javascript\np.likes // total number of likes\np.dislikes // total number of dislikes\np.score // virtual, likes - dislikes\n\np.likers // array of all likers\np.dislikers // array of all dislikers\n```\n\nOptions\n-------\n\nmongoose-likes can be customised in a number of ways. Here is a list of all options with their default values:\n\n```javascript\npostSchema.plugin(likesPlugin, {\n    // behaviour\n    disableDislikes: false, // if true, turns off disliking\n    \n    // Property names\n    likesName: 'likes',\n    dislikesName: 'dislikes',\n    scoreName: 'score',\n    \n    likersName: 'likers',\n    dislikersName: 'dislikers',\n    \n    // Function names\n    likeFuncName: 'like',\n    dislikeFuncName: 'dislike',\n    cancelLikeFuncName: 'cancelLike',\n    cancelDislikeFuncName: 'cancelDislike',\n    findLikes: 'findLikes',\n    findDislikes: 'findDislikes',\n    \n    // other options\n    likerIdType: ObjectId, // The type to use in the likers/dislikers array\n    indexed: false // whether to generate the indexes {_id:1, likers:1}, and {_id:1, dislikers:1}\n});\n```\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jjwchoy/mongoose-likes.git"
  },
  "version": "0.1.0"
}
